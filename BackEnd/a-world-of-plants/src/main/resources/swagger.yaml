---
swagger: "2.0"
info:
  version: "2016-07-25T18:53:20Z"
  title: "A World of Plants API v2"
host: "execute-api.us-east-1.amazonaws.com"
basePath: "/"
schemes:
- "https"
paths:
  /:
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /login:
    post:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "User"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/LoginUserResponse"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::339898884101:role/user-management-role"
        responses:
          BAD.*:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          INT.*:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\n  \"action\" : \"cf.funge.aworldofplants.action.LoginAction\"\
            ,\n  \"body\" : $input.json('$')\n}\n"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:339898884101:function:user-management/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "{}\n"
        requestTemplates:
          application/json: "{\n  \"statusCode\" : 200\n}\n"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /plants:
    get:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Plants"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - sigv4: []
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::*:user/*"
        responses:
          BAD.*:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          INT.*:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\n  \"action\" : \"cf.funge.aworldofplants.action.ListPlantsAction\"\
            ,\n  \"body\" : $input.json('$')\n}\n"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:339898884101:function:user-management/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws"
    post:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "NewPlant"
        required: true
        schema:
          $ref: "#/definitions/NewPlant"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/NewPlantResponse"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - sigv4: []
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::*:user/*"
        responses:
          BAD.*:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          INT.*:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\n  \"action\" : \"cf.funge.aworldofplants.action.CreatePlantAction\"\
            ,\n  \"body\" : $input.json('$')\n}\n"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:339898884101:function:user-management/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "{}\n"
        requestTemplates:
          application/json: "{\n  \"statusCode\" : 200\n}\n"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /plants/user:
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "{}"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /plants/user/{username}:
    get:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Plants"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - sigv4: []
      x-amazon-apigateway-integration:
        responses:
          BAD.*:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          INT.*:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\n    \"action\" : \"cf.funge.aworldofplants.action.ListUserPlantsAction\"\
            ,\n    \"body\" : {\n        \"username\" : \"$input.params('username')\"\
            \n    }\n}\n"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:339898884101:function:user-management/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "{}"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /plants/{plantId}:
    get:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "plantId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Plant"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - sigv4: []
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::*:user/*"
        responses:
          BAD.*:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          INT.*:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\n  \"action\" : \"cf.funge.aworldofplants.action.GetPlantAction\"\
            ,\n  \"body\" : {\n    \"plantId\" : \"$input.params('plantId')\"\n  }\n\
            }\n"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:339898884101:function:user-management/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "{}\n"
        requestTemplates:
          application/json: "{\n  \"statusCode\" : 200\n}\n"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /users:
    post:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "User"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/RegisterUserResponse"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::339898884101:role/user-management-role"
        responses:
          BAD.*:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          INT.*:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\n  \"action\" : \"cf.funge.aworldofplants.action.RegisterAction\"\
            ,\n  \"body\" : $input.json('$')\n}\n"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:339898884101:function:user-management/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "{}\n"
        requestTemplates:
          application/json: "{\n  \"statusCode\" : 200\n}\n"
        passthroughBehavior: "when_no_match"
        type: "mock"
securityDefinitions:
  sigv4:
    type: "apiKey"
    name: "Authorization"
    in: "header"
    x-amazon-apigateway-authtype: "awsSigv4"
definitions:
  NewPlant:
    properties:
      username:
        type: "string"
        description: "username of owner"
      plantType:
        type: "string"
        description: "Free text plant type"
      plantName:
        type: "string"
        description: "Free text plant name"
      plantAge:
        type: "integer"
        description: "Age of the new plant"
  Plant:
    properties:
      plantId:
        type: "string"
        description: "The generated unique identifier for the new plant"
      plantType:
        type: "string"
        description: "Free text plant type"
      plantName:
        type: "string"
        description: "Free text plant name"
      plantAge:
        type: "integer"
        description: "Age of the new plant"
  User:
    properties:
      email:
        type: "string"
        description: "An email for the new user"
      username:
        type: "string"
        description: "A unique username for the user"
      password:
        type: "string"
        description: "A password for the new user"
  LoginUserResponse:
    properties:
      identityId:
        type: "string"
        description: "The unique identifier for the new user"
      token:
        type: "string"
        description: "An OpenID token for the new user"
      credentials:
        type: "object"
        properties:
          secretKey:
            type: "string"
            description: "Temporary secret access key to sign requests"
          accessKey:
            type: "string"
            description: "Temporary access key to sign requests"
          sessionToken:
            type: "string"
            description: "Tempoarary session token"
          expiration:
            type: "integer"
            description: "Expiration date of the temporary credentials in millis since\
              \ 1/1/1970\n"
  NewPlantResponse:
    properties:
      plantId:
        type: "string"
        description: "The generated unique identifier for the new plant"
  RegisterUserResponse:
    properties:
      username:
        type: "string"
        description: "The username of the new user"
      identityId:
        type: "string"
        description: "The unique identifier for the new user"
      token:
        type: "string"
        description: "An OpenID token for the new user"
      credentials:
        type: "object"
        properties:
          secretKey:
            type: "string"
            description: "Temporary secret access key to sign requests"
          accessKey:
            type: "string"
            description: "Temporary access key to sign requests"
          sessionToken:
            type: "string"
            description: "Tempoarary session token"
          expiration:
            type: "integer"
            description: "Expiration date of the temporary credentials in millis since\
              \ 1/1/1970\n"
  Error:
    properties:
      code:
        type: "integer"
        format: "int32"
      message:
        type: "string"
      fields:
        type: "string"
  Plants:
    type: "array"
    items:
      $ref: "#/definitions/Plant"
